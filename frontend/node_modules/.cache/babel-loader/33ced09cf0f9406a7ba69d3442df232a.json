{"ast":null,"code":"import axios from \"axios\";\nimport { BLOG_COMMENT_FAIL, BLOG_COMMENT_REQUEST, BLOG_COMMENT_SUCCESS, BLOG_LIKE_FAIL, BLOG_LIKE_REQUEST, BLOG_LIKE_SUCCESS, BLOG_LIST_FAIL, BLOG_LIST_REQUEST, BLOG_LIST_SUCCESS, CREATE_BLOG_FAIL, CREATE_BLOG_REQUEST, CREATE_BLOG_SUCCESS, DELETE_BLOG_COMMENT_FAIL, DELETE_BLOG_COMMENT_REQUEST, DELETE_BLOG_COMMENT_SUCCESS, DELETE_BLOG_FAIL, DELETE_BLOG_REQUEST, DELETE_BLOG_SUCCESS, GET_MY_BLOGS_FAIL, GET_MY_BLOGS_REQUEST, GET_MY_BLOGS_SUCCESS, SINGLE_BLOG_FAIL, SINGLE_BLOG_REQUEST, SINGLE_BLOG_SUCCESS, TOP_BLOG_FAIL, TOP_BLOG_REQUEST, TOP_BLOG_SUCCESS } from \"../constants/blogConstants\";\nexport const listBlogs = () => async dispatch => {\n  try {\n    dispatch({\n      type: BLOG_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(\"api/blogs\");\n    dispatch({\n      type: BLOG_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: BLOG_LIST_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const topBlogs = () => async dispatch => {\n  try {\n    dispatch({\n      type: TOP_BLOG_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(\"api/blogs/top\");\n    dispatch({\n      type: TOP_BLOG_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: TOP_BLOG_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const likeBlog = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: BLOG_LIKE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    await axios.post(\"api/blogs/like\", {\n      id\n    }, config);\n    dispatch({\n      type: BLOG_LIKE_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: BLOG_LIKE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const commentBlog = (comment, id) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: BLOG_COMMENT_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(\"api/blogs/reply\", {\n      comment,\n      id\n    }, config);\n    dispatch({\n      type: BLOG_COMMENT_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: BLOG_COMMENT_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const createBlogPost = (title, body, image) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: CREATE_BLOG_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(\"api/blogs/\", {\n      title,\n      body,\n      image\n    }, config);\n    dispatch({\n      type: CREATE_BLOG_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: CREATE_BLOG_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const deleteBlogPost = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: DELETE_BLOG_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    await axios.delete(\"api/blogs/\", {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n        \"Content-Type\": \"application/json\"\n      },\n      data: {\n        id\n      }\n    });\n    dispatch({\n      type: DELETE_BLOG_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: DELETE_BLOG_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const deleteCommentBlog = (blogId, commentId) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: DELETE_BLOG_COMMENT_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    await axios.delete(\"api/blogs/reply\", {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n        \"Content-Type\": \"application/json\"\n      },\n      data: {\n        blogId,\n        commentId\n      }\n    });\n    dispatch({\n      type: DELETE_BLOG_COMMENT_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: DELETE_BLOG_COMMENT_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const getSingleBlog = id => async dispatch => {\n  try {\n    dispatch({\n      type: SINGLE_BLOG_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`api/blogs/${id}`);\n    dispatch({\n      type: SINGLE_BLOG_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: SINGLE_BLOG_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const listMyBlogs = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: GET_MY_BLOGS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(\"api/blogs/profile\", config);\n    dispatch({\n      type: GET_MY_BLOGS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_MY_BLOGS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/elijr/Desktop/CODING/Personal Projects/Portfolio/eco/frontend/src/actions/blogActions.js"],"names":["axios","BLOG_COMMENT_FAIL","BLOG_COMMENT_REQUEST","BLOG_COMMENT_SUCCESS","BLOG_LIKE_FAIL","BLOG_LIKE_REQUEST","BLOG_LIKE_SUCCESS","BLOG_LIST_FAIL","BLOG_LIST_REQUEST","BLOG_LIST_SUCCESS","CREATE_BLOG_FAIL","CREATE_BLOG_REQUEST","CREATE_BLOG_SUCCESS","DELETE_BLOG_COMMENT_FAIL","DELETE_BLOG_COMMENT_REQUEST","DELETE_BLOG_COMMENT_SUCCESS","DELETE_BLOG_FAIL","DELETE_BLOG_REQUEST","DELETE_BLOG_SUCCESS","GET_MY_BLOGS_FAIL","GET_MY_BLOGS_REQUEST","GET_MY_BLOGS_SUCCESS","SINGLE_BLOG_FAIL","SINGLE_BLOG_REQUEST","SINGLE_BLOG_SUCCESS","TOP_BLOG_FAIL","TOP_BLOG_REQUEST","TOP_BLOG_SUCCESS","listBlogs","dispatch","type","data","get","payload","error","response","message","topBlogs","likeBlog","id","getState","userLogin","userInfo","config","headers","Authorization","token","post","commentBlog","comment","createBlogPost","title","body","image","deleteBlogPost","delete","deleteCommentBlog","blogId","commentId","getSingleBlog","listMyBlogs"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  BLOG_COMMENT_FAIL,\r\n  BLOG_COMMENT_REQUEST,\r\n  BLOG_COMMENT_SUCCESS,\r\n  BLOG_LIKE_FAIL,\r\n  BLOG_LIKE_REQUEST,\r\n  BLOG_LIKE_SUCCESS,\r\n  BLOG_LIST_FAIL,\r\n  BLOG_LIST_REQUEST,\r\n  BLOG_LIST_SUCCESS,\r\n  CREATE_BLOG_FAIL,\r\n  CREATE_BLOG_REQUEST,\r\n  CREATE_BLOG_SUCCESS,\r\n  DELETE_BLOG_COMMENT_FAIL,\r\n  DELETE_BLOG_COMMENT_REQUEST,\r\n  DELETE_BLOG_COMMENT_SUCCESS,\r\n  DELETE_BLOG_FAIL,\r\n  DELETE_BLOG_REQUEST,\r\n  DELETE_BLOG_SUCCESS,\r\n  GET_MY_BLOGS_FAIL,\r\n  GET_MY_BLOGS_REQUEST,\r\n  GET_MY_BLOGS_SUCCESS,\r\n  SINGLE_BLOG_FAIL,\r\n  SINGLE_BLOG_REQUEST,\r\n  SINGLE_BLOG_SUCCESS,\r\n  TOP_BLOG_FAIL,\r\n  TOP_BLOG_REQUEST,\r\n  TOP_BLOG_SUCCESS,\r\n} from \"../constants/blogConstants\";\r\n\r\nexport const listBlogs = () => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: BLOG_LIST_REQUEST });\r\n\r\n    const { data } = await axios.get(\"api/blogs\");\r\n\r\n    dispatch({ type: BLOG_LIST_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: BLOG_LIST_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const topBlogs = () => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: TOP_BLOG_REQUEST });\r\n\r\n    const { data } = await axios.get(\"api/blogs/top\");\r\n\r\n    dispatch({ type: TOP_BLOG_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: TOP_BLOG_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const likeBlog = (id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: BLOG_LIKE_REQUEST });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    await axios.post(\"api/blogs/like\", { id }, config);\r\n\r\n    dispatch({ type: BLOG_LIKE_SUCCESS });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: BLOG_LIKE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const commentBlog = (comment, id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: BLOG_COMMENT_REQUEST });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.post(\r\n      \"api/blogs/reply\",\r\n      { comment, id },\r\n      config\r\n    );\r\n\r\n    dispatch({ type: BLOG_COMMENT_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: BLOG_COMMENT_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const createBlogPost =\r\n  (title, body, image) => async (dispatch, getState) => {\r\n    try {\r\n      dispatch({ type: CREATE_BLOG_REQUEST });\r\n\r\n      const {\r\n        userLogin: { userInfo },\r\n      } = getState();\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${userInfo.token}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        \"api/blogs/\",\r\n        { title, body, image },\r\n        config\r\n      );\r\n\r\n      dispatch({ type: CREATE_BLOG_SUCCESS, payload: data });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: CREATE_BLOG_FAIL,\r\n        payload:\r\n          error.response && error.response.data.message\r\n            ? error.response.data.message\r\n            : error.message,\r\n      });\r\n    }\r\n  };\r\n\r\nexport const deleteBlogPost = (id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: DELETE_BLOG_REQUEST });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    await axios.delete(\"api/blogs/\", {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      data: { id },\r\n    });\r\n\r\n    dispatch({ type: DELETE_BLOG_SUCCESS });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: DELETE_BLOG_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const deleteCommentBlog =\r\n  (blogId, commentId) => async (dispatch, getState) => {\r\n    try {\r\n      dispatch({ type: DELETE_BLOG_COMMENT_REQUEST });\r\n\r\n      const {\r\n        userLogin: { userInfo },\r\n      } = getState();\r\n\r\n      await axios.delete(\"api/blogs/reply\", {\r\n        headers: {\r\n          Authorization: `Bearer ${userInfo.token}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: { blogId, commentId },\r\n      });\r\n\r\n      dispatch({ type: DELETE_BLOG_COMMENT_SUCCESS });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: DELETE_BLOG_COMMENT_FAIL,\r\n        payload:\r\n          error.response && error.response.data.message\r\n            ? error.response.data.message\r\n            : error.message,\r\n      });\r\n    }\r\n  };\r\n\r\nexport const getSingleBlog = (id) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: SINGLE_BLOG_REQUEST });\r\n\r\n    const { data } = await axios.get(`api/blogs/${id}`);\r\n\r\n    dispatch({ type: SINGLE_BLOG_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: SINGLE_BLOG_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const listMyBlogs = () => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: GET_MY_BLOGS_REQUEST });\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n    const { data } = await axios.get(\"api/blogs/profile\", config);\r\n\r\n    dispatch({ type: GET_MY_BLOGS_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: GET_MY_BLOGS_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}